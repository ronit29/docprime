# Generated by Django 2.0.5 on 2019-04-18 09:14

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('bookinganalytics', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(
            '''
                CREATE OR REPLACE FUNCTION sync_opd_analytics_data() RETURNS trigger AS
                $BODY$
                BEGIN
                IF NEW.status <> OLD.status THEN
                UPDATE sync_booking_analytics SET last_updated_at=NEW.updated_at
                WHERE object_id=NEW.id and content_type_id=(select id from django_content_type where model = 'opdappointment');
                END IF;
                RETURN NEW;
                END;
                $BODY$
                LANGUAGE plpgsql VOLATILE
                COST 100;
            '''
        ),
        migrations.RunSQL(
            '''
                CREATE TRIGGER opd_analytics_sync BEFORE UPDATE
                ON opd_appointment
                FOR EACH ROW
                EXECUTE PROCEDURE sync_opd_analytics_data()
            '''
        ),
        migrations.RunSQL(
            '''
                CREATE OR REPLACE FUNCTION sync_lab_analytics_data() RETURNS trigger AS
                $BODY$
                BEGIN
                IF NEW.status <> OLD.status THEN
                UPDATE sync_booking_analytics SET last_updated_at=NEW.updated_at
                WHERE object_id=NEW.id and content_type_id=(select id from django_content_type where model = 'labappointment');
                END IF;
                RETURN NEW;
                END;
                $BODY$
                LANGUAGE plpgsql VOLATILE
                COST 100;
            '''
        ),
        migrations.RunSQL(
            '''
                CREATE TRIGGER lab_analytics_sync BEFORE UPDATE
                ON lab_appointment
                FOR EACH ROW
                EXECUTE PROCEDURE sync_lab_analytics_data()
            '''
        ),

    ]
