# Generated by Django 2.0.2 on 2018-04-19 03:41

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('doctor', '0014_auto_20180419_0911'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Lab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_status', models.PositiveSmallIntegerField(choices=[(1, 'In Progress'), (2, 'Submitted For QC Check'), (3, 'QC approved')], default=1, editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('about', models.CharField(blank=True, max_length=1000)),
                ('license', models.CharField(blank=True, max_length=200)),
                ('operational_since', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800)])),
                ('parking', models.PositiveSmallIntegerField(blank=True, choices=[('', 'Select'), (1, 'Easy'), (2, 'Difficult')], null=True)),
                ('always_open', models.BooleanField(default=False, verbose_name='Is lab open 24X7')),
                ('network_type', models.PositiveSmallIntegerField(blank=True, choices=[('', 'Select'), (1, 'Non Network Lab'), (2, 'Network Lab')], null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('location_error', models.PositiveIntegerField(blank=True, null=True)),
                ('building', models.CharField(blank=True, max_length=100)),
                ('sublocality', models.CharField(blank=True, max_length=100)),
                ('locality', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('pin_code', models.PositiveIntegerField(blank=True, null=True)),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('hospital', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='doctor.Hospital')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabAccreditation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.Lab')),
            ],
            options={
                'db_table': 'lab_accreditation',
            },
        ),
        migrations.CreateModel(
            name='LabAward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('year', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1900)])),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.Lab')),
            ],
            options={
                'db_table': 'lab_award',
            },
        ),
        migrations.CreateModel(
            name='LabCertification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.Lab')),
            ],
            options={
                'db_table': 'lab_certification',
            },
        ),
        migrations.CreateModel(
            name='LabImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('width', models.PositiveSmallIntegerField(editable=False)),
                ('height', models.PositiveSmallIntegerField(editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.ImageField(height_field='height', upload_to='lab/images', width_field='width')),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.Lab')),
            ],
            options={
                'db_table': 'lab_image',
            },
        ),
        migrations.CreateModel(
            name='LabManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('number', models.BigIntegerField()),
                ('email', models.EmailField(blank=True, max_length=100)),
                ('details', models.CharField(blank=True, max_length=200)),
                ('contact_type', models.PositiveSmallIntegerField(choices=[(1, 'Other'), (2, 'Single Point of Contact'), (3, 'Manager'), (4, 'Owner')])),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.Lab')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabNetwork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_status', models.PositiveSmallIntegerField(choices=[(1, 'In Progress'), (2, 'Submitted For QC Check'), (3, 'QC approved')], default=1, editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('operational_since', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900)])),
                ('about', models.CharField(blank=True, max_length=2000)),
                ('network_size', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('building', models.CharField(blank=True, max_length=100)),
                ('sublocality', models.CharField(blank=True, max_length=100)),
                ('locality', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('pin_code', models.PositiveIntegerField(blank=True, null=True)),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'lab_network',
            },
        ),
        migrations.CreateModel(
            name='LabNetworkAccreditation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.LabNetwork')),
            ],
            options={
                'db_table': 'lab_network_accreditation',
            },
        ),
        migrations.CreateModel(
            name='LabNetworkAward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('year', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1900)])),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.LabNetwork')),
            ],
            options={
                'db_table': 'lab_network_award',
            },
        ),
        migrations.CreateModel(
            name='LabNetworkCertification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.LabNetwork')),
            ],
            options={
                'db_table': 'lab_network_certification',
            },
        ),
        migrations.CreateModel(
            name='LabNetworkEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=100)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.LabNetwork')),
            ],
            options={
                'db_table': 'lab_network_email',
            },
        ),
        migrations.CreateModel(
            name='LabNetworkHelpline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('number', models.BigIntegerField()),
                ('details', models.CharField(blank=True, max_length=200)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.LabNetwork')),
            ],
            options={
                'db_table': 'lab_network_helpline',
            },
        ),
        migrations.CreateModel(
            name='LabNetworkManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('number', models.BigIntegerField()),
                ('email', models.EmailField(blank=True, max_length=100)),
                ('details', models.CharField(blank=True, max_length=200)),
                ('contact_type', models.PositiveSmallIntegerField(choices=[(1, 'Other'), (2, 'Single Point of Contact'), (3, 'Manager')])),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.LabNetwork')),
            ],
            options={
                'db_table': 'lab_network_manager',
            },
        ),
        migrations.CreateModel(
            name='LabTiming',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('day', models.PositiveSmallIntegerField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')])),
                ('start', models.PositiveSmallIntegerField(choices=[(6, '6 AM'), (7, '7 AM'), (8, '8 AM'), (9, '9 AM'), (10, '10 AM'), (11, '11 AM'), (12, '12 PM'), (13, '1 PM'), (14, '2 PM'), (15, '3 PM'), (16, '4 PM'), (17, '5 PM'), (18, '6 PM'), (19, '7 PM'), (20, '8 PM'), (21, '9 PM'), (22, '10 PM'), (23, '11 PM')])),
                ('end', models.PositiveSmallIntegerField(choices=[(6, '6 AM'), (7, '7 AM'), (8, '8 AM'), (9, '9 AM'), (10, '10 AM'), (11, '11 AM'), (12, '12 PM'), (13, '1 PM'), (14, '2 PM'), (15, '3 PM'), (16, '4 PM'), (17, '5 PM'), (18, '6 PM'), (19, '7 PM'), (20, '8 PM'), (21, '9 PM'), (22, '10 PM'), (23, '11 PM')])),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnostic.Lab')),
            ],
            options={
                'db_table': 'lab_timing',
            },
        ),
        migrations.CreateModel(
            name='PathologyTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('is_package', models.BooleanField(verbose_name='Is this test package type?')),
                ('why', models.CharField(blank=True, max_length=1000)),
                ('pre_test_info', models.CharField(blank=True, max_length=1000)),
                ('sample_handling_instructions', models.CharField(blank=True, max_length=1000)),
                ('sample_collection_instructions', models.CharField(blank=True, max_length=1000)),
                ('sample_amount', models.CharField(blank=True, max_length=1000)),
                ('expected_tat', models.CharField(blank=True, max_length=1000)),
            ],
            options={
                'db_table': 'pathalogy_test',
            },
        ),
        migrations.CreateModel(
            name='PathologyTestType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RadiologyTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('is_package', models.BooleanField(verbose_name='Is this test package type?')),
                ('why', models.CharField(blank=True, max_length=1000)),
                ('pre_test_info', models.CharField(blank=True, max_length=1000)),
            ],
            options={
                'db_table': 'radiology_test',
            },
        ),
        migrations.CreateModel(
            name='RadiologyTestType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='radiologytest',
            name='test_sub_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='test_sub_type', to='diagnostic.RadiologyTestType'),
        ),
        migrations.AddField(
            model_name='radiologytest',
            name='test_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='test_type', to='diagnostic.RadiologyTestType'),
        ),
        migrations.AddField(
            model_name='pathologytest',
            name='test_sub_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='test_sub_type', to='diagnostic.PathologyTestType'),
        ),
        migrations.AddField(
            model_name='pathologytest',
            name='test_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='test_type', to='diagnostic.PathologyTestType'),
        ),
        migrations.AddField(
            model_name='lab',
            name='network',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='diagnostic.LabNetwork'),
        ),
    ]
